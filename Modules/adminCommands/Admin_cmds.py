import html

import telegram
from telegram import Update
from telegram.ext import CommandHandler, ContextTypes

from utils.dataBase.FireDB import DB
from utils.decoders_ import IsAdmin
from utils.Group_log import LOG

LIST_OF_BAN_IDS = DB.blocked_users_cache
LIST_ADMIN_USER_IDS = DB.admins_users


@IsAdmin
async def Chat_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Give sback user info to the admin who asked that

    """

    UsersId = context.args

    if not UsersId:
        await update.message.reply_text("Us·¥Ä…¢·¥á: /chat_info (·¥Ñ ú·¥Ä·¥õ_…™·¥Ö)")
        return

    if len(UsersId) > 30:
        await update.message.reply_text(
            "Maximum of 30 users can be only shown in one time.\n\nUs·¥Ä…¢·¥á: /chat_info (·¥Ñ ú·¥Ä·¥õ_…™·¥Ö)"
        )
        return

    msg = await update.message.reply_html("<b>Extracting info...</b>")

    for chat_id_str in UsersId:
        try:
            chat_id = int(chat_id_str)

            # Get chat information and format response
            try:
                chat = await context.bot.get_chat(chat_id)
                chat_data = {
                    "‚ûª c ú·¥Ä·¥õ …™·¥Ö": f"<code>{chat.id}</code>",
                    "‚ûª c ú·¥Ä·¥õ ·¥õ è·¥ò·¥á": chat.type,
                    "‚ûª ·¥õ…™·¥õ ü·¥á": chat.title,
                    "‚ûª ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á": chat.username,
                    "‚ûª “ì…™ Äs·¥õ …¥·¥Ä·¥ç·¥á": chat.first_name,
                    "‚ûª  ü·¥Äs·¥õ …¥·¥Ä·¥ç·¥á": chat.last_name,
                    "‚ûª ·¥ò ú·¥è·¥õ·¥è": chat.photo,
                    "‚ûª ·¥Ö·¥ás·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥": chat.description,
                    "‚ûª …™…¥·¥†…™·¥õ·¥á  ü…™…¥·¥ã": chat.invite_link,
                    "‚ûª ·¥ò…™…¥…¥·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á": (
                        chat.pinned_message.text if chat.pinned_message else None
                    ),
                    "‚ûª s·¥õ…™·¥Ñ·¥ã·¥á Ä s·¥á·¥õ …¥·¥Ä·¥ç·¥á": chat.sticker_set_name,
                    "‚ûª ·¥Ñ·¥Ä…¥ s·¥á·¥õ s·¥õ…™·¥Ñ·¥ã·¥á Ä s·¥á·¥õ": chat.can_set_sticker_set,
                    "‚ûª  ü…™…¥·¥ã·¥á·¥Ö ·¥Ñ ú·¥Ä·¥õ …™·¥Ö": chat.linked_chat_id,
                    "‚ûª  ü·¥è·¥Ñ·¥Ä·¥õ…™·¥è…¥": chat.location,
                    "‚ûª ·¥ä·¥è…™…¥  ô è  Ä·¥á«´·¥ú·¥ás·¥õ": chat.join_by_request,
                    "‚ûª ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s\n\n": chat.permissions,
                }
                filtered_data = {k: v for k, v in chat_data.items() if v is not None}
                info_text = "\n".join(
                    [f"{key}: {value}" for key, value in filtered_data.items()]
                )
                # Send response for each chat
                await msg.edit_text(
                    f"C ú·¥Ä·¥õ I…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥:\n{info_text}", parse_mode="HTML"
                )
            except telegram.error.Forbidden:
                await msg.edit_text(
                    f"C ú·¥Ä·¥õ ID {chat_id}: I ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥Ä·¥Ñ·¥Ñ·¥áss ·¥õ·¥è ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ."
                )
            except telegram.error.BadRequest as e:
                await msg.edit_text(
                    f"C ú·¥Ä·¥õ ID {chat_id}: B·¥Ä·¥Ö  Ä·¥á·¥èÃ®·¥ú·¥ás·¥õ. E Ä Ä·¥è Ä: {e.message}"
                )
            except Exception as e:
                await msg.edit_text(
                    f"C ú·¥Ä·¥õ ID {chat_id}: F·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è …¢·¥á·¥õ ·¥Ñ ú·¥Ä·¥õ …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥. E Ä Ä·¥è Ä: {e}"
                )
        except ValueError:
            await msg.edit_text(
                f"I…¥·¥†·¥Ä ü…™·¥Ö ·¥Ñ ú·¥Ä·¥õ ID: {chat_id_str}. P ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á …¥·¥ú·¥ç·¥á Ä…™·¥Ñ ·¥Ñ ú·¥Ä·¥õ IDs."
            )


@IsAdmin
async def Chat_Data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Gives data from the user bots usage

    """
    UsersId = context.args
    if not UsersId:
        await update.message.reply_text("Us·¥Ä…¢·¥á: /user_data (·¥Ñ ú·¥Ä·¥õ_…™·¥Ö)")
        return

    msg = await update.message.reply_html("<b>Extracting info ...</b>")
    userId = UsersId[0]

    chat = await context.bot.get_chat(userId)
    if chat.type == "private":
        first_name = chat.first_name
    else:
        first_name = chat.title

    if userId in LIST_OF_BAN_IDS:
        is_banned = "Yes"
    else:
        is_banned = "No"

    ai_prompt = DB.extract_instruction(userId)

    User_data = DB.user_exists(userId)
    if User_data:
        used_ai = "Yes"
    else:
        used_ai = "No"

    if userId in LIST_ADMIN_USER_IDS:
        user_admin = "Yes"
    else:
        user_admin = "No"

    Info = f"""
<b>¬ª Chat data:- </b>

‚ûª ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á: <a href='tg://user?id={chat.id}'>{first_name}</a>
‚ûª …™s  ô·¥Ä…¥…¥·¥á·¥Ö:  {is_banned}
‚ûª Is ·¥Ä·¥Ö·¥ç…™…¥:   {user_admin}
‚ûª ·¥Ä…™ ·¥ò Ä·¥è·¥ç·¥ò·¥õ:  {html.escape(ai_prompt)}
‚ûª ·¥ús·¥á·¥Ö ·¥Ä…™:    {used_ai}
"""
    await msg.edit_text(Info, parse_mode="HTML")


@IsAdmin
async def BAN(update: Update, context: ContextTypes.DEFAULT_TYPE):
    UsersId = context.args
    if not UsersId:
        await update.message.reply_text("Us·¥Ä…¢·¥á: /ban (·¥Ñ ú·¥Ä·¥õ_…™·¥Ö)/(·¥ús·¥á Ä_…™·¥Ö)")
        return

    msg = await update.message.reply_html("<b>B·¥Ä…¥…¥…™…¥…¢ ·¥õ ú·¥á ·¥ús·¥á Ä....</b>")

    added_users_info = ""

    for chat_id_str in UsersId:
        try:
            DB.block_user(chat_id_str)
            try:
                user = await context.bot.get_chat(chat_id_str)
                added_users_info = f"""
<b>User:</b> <a href='tg://user?id={user.id}'>{user.first_name}</a>
<b>User ID:</b> {user.id}
"""

            except Exception as e:
                added_users_info += f"\nF·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è …¢·¥á·¥õ ·¥ús·¥á Ä …™…¥“ì·¥è “ì·¥è Ä: {chat_id_str}"
            log = f"""
<b>üî®¬ª User Banned</b>
{added_users_info}
"""
            await LOG(update, context, log)
        except Exception as e:
            await msg.edit_text(f"A…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö ·¥° ú…™ ü·¥á  ô·¥Ä…¥…¥…™…¥…¢ ·¥õ ú·¥á ·¥ús·¥á Ä: {e}")

    await msg.edit_text("<b>üî® User Banned Successfully</b>", parse_mode="HTML")


@IsAdmin
async def Un_BAN(update: Update, context: ContextTypes.DEFAULT_TYPE):
    UsersId = context.args
    if not UsersId:
        await update.message.reply_text("Us·¥Ä…¢·¥á: /Unban (·¥Ñ ú·¥Ä·¥õ_…™·¥Ö)/(·¥ús·¥á Ä_…™·¥Ö")
        return

    msg = await update.message.reply_html("<b>U…¥B·¥Ä…¥…¥…™…¥…¢ ·¥õ ú·¥á ·¥ús·¥á Ä....</b>")

    added_users_info = ""

    for chat_id_str in UsersId:
        try:
            DB.unblock_user(chat_id_str)
            try:
                user = await context.bot.get_chat(chat_id_str)
                added_users_info = f"""
<b>User:</b> <a href='tg://user?id={user.id}'>{user.first_name}</a>
<b>User ID:</b> {user.id}
"""
            except Exception as e:
                added_users_info += f"\nF·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è …¢·¥á·¥õ ·¥ús·¥á Ä …™…¥“ì·¥è “ì·¥è Ä: {chat_id_str}"
            log = f"""
<b>üîì¬ª User U…¥Banned</b>
{added_users_info}
"""
            await LOG(update, context, log)
        except Exception as e:
            await msg.edit_text(f"A…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö ·¥° ú…™ ü·¥á U…¥ ô·¥Ä…¥…¥…™…¥…¢ ·¥õ ú·¥á ·¥ús·¥á Ä: {e}")

    await msg.edit_text("<b>üîì User U…¥Banned Successfully</b>", parse_mode="HTML")


CHAT_INFO_CMD = CommandHandler(("cid_info", "chat_info"), Chat_info)
CHAT_DATA_CMD = CommandHandler(("user_data", "chat_data"), Chat_Data)
BAN_CMD = CommandHandler(("ban", "block"), BAN)
UN_BAN_CMD = CommandHandler(("unban", "un_ban", "unblock"), Un_BAN)
